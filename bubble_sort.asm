#Name: Ram Panda
#Course: CS 3340.501
#implementing bubble sort (Chapter 2)



	.data
array:	.word		19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
			19,-2,95,26,83,17,-5,69,-16,10,45,-17,88,27,-13,67,-48,6,-66,40
len:	.word		500



	.text

main:	la	$a0, array	# array pointer
	lw	$a1, len	# array size
	jal	sort
	li	$v0, 10
	syscall


##Sorting function starts here
sort:	addi	$sp, $sp, -20	# push 5 registers onto stack
	sw	$ra, 16($sp)
	sw	$s3, 12($sp)
	sw	$s2, 8($sp)
	sw	$s1, 4($sp)
	sw	$s0, ($sp)
	move	$s2, $a0	# save $a0
	move	$s3, $a1	# save $a1
	
	
##### outer loop starts here
	move	$s0, $zero	
for1tst: slt	$t0, $s0, $s3	
	beq	$t0, $zero, exit1
	

#### inner loop starts here
	addi	$s1, $s0, -1	
for2tst: slti	$t0, $s1, 0	
	bne	$t0, $zero, exit2
	sll	$t1, $s1, 2	
	add	$t2, $s2, $t1	
	lw	$t3, ($t2)	
	lw	$t4, 4($t2)	
	slt	$t0, $t4, $t3 #checks for need to swap?
	beq	$t0, $zero, exit2
	
### swap happens here
	move	$a0, $s2
	move	$a1, $s1
	jal	swap
	addi	$s1, $s1, -1	
	j	for2tst
	
### inner loop end
exit2: 	addi	$s0, $s0, 1	# i++
	j	for1tst
	
###outer loop end 
exit1:	lw	$s0, ($sp)	
	lw	$s1, 4($sp)
	lw	$s2, 8($sp)
	lw	$s3, 12($sp)
	lw	$ra, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra	


##swap function
swap:	sll	$t1, $a1, 2		
	add	$t1, $a0, $t1		
	lw	$t0, ($t1)		# load the two values
	lw	$t2, 4($t1)
	sw	$t2, ($t1)		# store (swap) the two values
	sw	$t0, 4($t1)
	jr	$ra